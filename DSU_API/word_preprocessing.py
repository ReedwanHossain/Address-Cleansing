import re
def word_preprocessor(word):
    word=re.sub('a+', 'a', word)
    word=re.sub('b+', 'b', word)
    word=re.sub('c+', 'c', word)
    word=re.sub('d+', 'd', word)
    word=re.sub('e+', 'e', word)
    word=re.sub('f+', 'f', word)
    word=re.sub('g+', 'g', word)
    word=re.sub('h+', 'h', word)
    word=re.sub('i+', 'i', word)
    word=re.sub('j+', 'j', word)
    word=re.sub('k+', 'k', word)
    word=re.sub('l+', 'l', word)
    word=re.sub('m+', 'm', word)
    word=re.sub('n+', 'n', word)
    word=re.sub('o+', 'o', word)
    word=re.sub('p+', 'p', word)
    word=re.sub('q+', 'q', word)
    word=re.sub('r+', 'r', word)
    word=re.sub('s+', 's', word)
    word=re.sub('t+', 't', word)
    word=re.sub('u+', 'u', word)
    word=re.sub('v+', 'v', word)
    word=re.sub('w+', 'w', word)
    word=re.sub('x+', 'x', word)
    word=re.sub('y+', 'y', word)
    word=re.sub('z+', 'z', word)
    word=re.sub('ah+', 'a', word)
   # word=re.sub('be+','b',word)
    word=re.sub('bh+','v',word)
    word=re.sub('ch+','c',word)
    word=re.sub('dh+','d',word)
    word=re.sub('ea+','y',word)
    word=re.sub('fh+','f',word)
    word=re.sub('gh+','g',word)
    word=re.sub('ih+','i',word)
    word=re.sub('jh+','j',word)
    word=re.sub('kh+','k',word)
    word=re.sub('mh+','m',word)
    word=re.sub('nh+','n',word)
    word=re.sub('oh+','o',word)
    word=re.sub('ph+','f',word)
    word=re.sub('qh+','k',word)
    word=re.sub('sh+','s',word)
    word=re.sub('uh+','u',word)
    word=re.sub('vh+','v',word)
    word=re.sub('wh+','w',word)
    word=re.sub('xh+','x',word)
    word=re.sub('yh+','y',word)
    word=re.sub('zh+','j',word)
    word=re.sub('gaon+','gao',word)
    word=re.sub('gaun+','gao',word)
    word=re.sub('mymonsing+','mymensingh',word)
    word=re.sub('moimonsing+','mymensingh',word)
    word=re.sub('maimonsing+','mymensingh',word)
    
    return word


if __name__ == "__main__":
    while True:
        q = input('Enter address: ')
        print(word_preprocessor(q))